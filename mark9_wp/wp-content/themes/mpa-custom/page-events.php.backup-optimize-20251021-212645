<?php get_header(); ?>

<!-- Set custom page title -->

<!-- Hero Section -->
<section class="page-hero">
    <div class="container">
        <div class="hero-content">
            <h1><?php the_title(); ?></h1>
            <p><?php 
                $hero_description = get_post_meta(get_the_ID(), '_hero_description', true);
                echo $hero_description ?: 'Join our local and internationally promoted events';
            ?></p>
        </div>
        <div class="hero-image">
            <?php if (has_post_thumbnail()) : ?>
                <?php the_post_thumbnail('large', array('alt' => get_the_title() . ' Hero')); ?>
            <?php else : ?>
                <img src="<?php echo get_template_directory_uri(); ?>/assets/events-hero.jpg" alt="<?php echo esc_attr(get_the_title()); ?>">
            <?php endif; ?>
        </div>
    </div>
</section>


<!-- Top Section: Calendar + Featured Events -->
<section class="events-top-section">
    <div class="container">
        <div class="top-events-layout">
            <!-- Calendar on the left -->
            <div class="calendar-section">
                <div class="section-header">
                    <h2>Event Calendar</h2>
                    <p>Stay updated with our upcoming events and activities</p>
                </div>
                <div class="calendar-widget">
                    <div class="calendar-header">
                        <button class="calendar-nav" id="prevMonth"><i class="fas fa-chevron-left"></i></button>
                        <h3 id="currentMonth"></h3>
                        <button class="calendar-nav" id="nextMonth"><i class="fas fa-chevron-right"></i></button>
                    </div>
                    <div class="calendar-grid" id="calendarGrid">
                        <!-- Calendar will be populated by JavaScript -->
                    </div>
                    <div class="calendar-subscription">
                        <button class="btn-subscribe-calendar" id="subscribeCalendarBtn">
                            <i class="fas fa-calendar-alt"></i>
                            Subscribe to Our Calendar
                        </button>
                        <p class="subscription-info">Get all MPA events automatically in your calendar</p>
                    </div>
                </div>
            </div>
            <!-- Featured Events on the right -->
            <div class="featured-events-section">
                <div class="section-header">
                    <h2>Upcoming Events</h2>
                    <p>Don't miss our most important upcoming events</p>
                    <a href="#all-events" class="view-all-events" id="viewAllEventsLink">View all events</a>
                </div>
                <div class="featured-events-grid" id="upcomingEventsGrid">
                    <!-- Upcoming events will be populated dynamically from All Events section -->
                </div>
            </div>
        </div>
    </div>
</section>

<!-- All Events Section -->
<section class="events-page" id="all-events">
    <div class="container">
        <div class="section-header">
            <h2>All Events</h2>
            <p>Browse through all our events and activities</p>
        </div>
        <div class="filter-tabs">
            <button class="filter-tab active" data-filter="upcoming">Upcoming</button>
            <button class="filter-tab" data-filter="webinar">Webinars</button>
            <button class="filter-tab" data-filter="summit">Summit</button>
            <button class="filter-tab" data-filter="past">Past Events</button>
            <button class="filter-tab" data-filter="all">All Events</button>
        </div>
        <div class="events-grid">
            <?php
            // Query for all events
            $events_query = new WP_Query(array(
                'post_type' => 'mpa_event',
                'posts_per_page' => -1,
                'post_status' => 'publish',
                'meta_key' => '_event_date',
                'orderby' => 'meta_value',
                'order' => 'ASC'
            ));

            if ($events_query->have_posts()) :
                while ($events_query->have_posts()) : $events_query->the_post();
                    // Get event meta data
                    $event_date = get_post_meta(get_the_ID(), '_event_date', true);
                    $event_start_time = get_post_meta(get_the_ID(), '_event_start_time', true);
                    $event_end_time = get_post_meta(get_the_ID(), '_event_end_time', true);
                    $event_location = get_post_meta(get_the_ID(), '_event_location', true);
                    $event_price = get_post_meta(get_the_ID(), '_event_price', true);
                    $event_registration_url = get_post_meta(get_the_ID(), '_event_registration_url', true);
                    $event_status = get_post_meta(get_the_ID(), '_event_status', true);
                    $event_type = get_post_meta(get_the_ID(), '_event_type', true);
                    
                    // Set timezone to Malaysia
                    date_default_timezone_set('Asia/Kuala_Lumpur');
                    
                    // ALWAYS determine event status based on date (ignore database status)
                    if ($event_date) {
                        $event_date_obj = DateTime::createFromFormat('Y-m-d', $event_date);
                        $today = new DateTime();
                        $today->setTime(0, 0, 0); // Set to start of day
                        
                        if ($event_date_obj) {
                            // Auto-determine status based on date - ALWAYS override
                            if ($event_date_obj < $today) {
                                // Event is in the past
                                $event_status = 'past';
                            } else {
                                // Event is today or in the future
                                $event_status = 'upcoming';
                            }
                        }
                    }

                    
                    // Format date for display
                    $date_obj = DateTime::createFromFormat('Y-m-d', $event_date);
                    $day = $date_obj ? $date_obj->format('d') : '';
                    $month = $date_obj ? $date_obj->format('M') : '';
                    
                    // Format time for display
                    $start_time_obj = DateTime::createFromFormat('H:i', $event_start_time);
                    $end_time_obj = DateTime::createFromFormat('H:i', $event_end_time);
                    $time_display = '';
                    if ($start_time_obj && $end_time_obj) {
                        $time_display = $start_time_obj->format('g:i A') . ' - ' . $end_time_obj->format('g:i A');
                    } elseif ($event_status === 'past') {
                        $time_display = 'Past Event';
                    }
                    
                    // Event tags removed - using event_type meta field instead
                    
                    // Determine data categories for filtering
                    $data_categories = array($event_status);
                    if ($event_type) {
                        $data_categories[] = $event_type;
                    }
                    
                    // Get featured image or use placeholder
                    $featured_image = '';
                    if (has_post_thumbnail()) {
                        $featured_image = get_the_post_thumbnail_url(get_the_ID(), 'full');
                    } else {
                        // Check if it's a Happy Hour event and use specific placeholder
                        $event_title = get_the_title();
                        if (stripos($event_title, 'Happy Hour') !== false) {
                            $featured_image = get_template_directory_uri() . '/assets/placeholder-happy-hour.jpeg';
                        } else {
                            // Use placeholder or try to match with existing assets
                            $title_slug = sanitize_title(get_the_title());
                            $possible_images = array(
                                $title_slug . '.jpeg',
                                $title_slug . '.jpg',
                                'placeholder-event.svg'
                            );
                            
                            foreach ($possible_images as $img) {
                                $img_path = get_template_directory() . '/assets/' . $img;
                                if (file_exists($img_path)) {
                                    $featured_image = get_template_directory_uri() . '/assets/' . $img;
                                    break;
                                }
                            }
                            
                            // Fallback to placeholder
                            if (!$featured_image) {
                                $featured_image = get_template_directory_uri() . '/assets/placeholder-event.svg';
                            }
                        }
                    }
                    
                    // Generate calendar data attributes
                    $calendar_data = array(
                        'data-event' => sanitize_title(get_the_title()),
                        'data-date' => $event_date,
                        'data-time' => $event_start_time . '-' . $event_end_time,
                        'data-title' => esc_attr(get_the_title()),
                        'data-location' => esc_attr($event_location)
                    );
                    ?>
                    
                    <a href="<?php echo esc_url(get_permalink()); ?>" class="event-card-link" onclick="window.location.href=this.href; return false;">
                    <div class="event-card <?php echo esc_attr($event_status); ?>" 
                         data-category="<?php echo esc_attr(implode(' ', $data_categories)); ?>"
                         data-event-status="<?php echo esc_attr($event_status); ?>"
                         data-event-type="<?php echo esc_attr($event_type); ?>"
                         data-event-date="<?php echo esc_attr($event_date); ?>">
                        <div class="event-image">
                            <img src="<?php echo esc_url($featured_image); ?>" alt="<?php echo esc_attr(get_the_title()); ?>">
                            <div class="event-date-badge <?php echo $event_status === 'past' ? 'past' : ''; ?>">
                                <span class="day"><?php echo esc_html($day); ?></span>
                                <span class="month"><?php echo esc_html($month); ?></span>
                            </div>
                        </div>
                        <div class="event-content">
                            <div class="event-meta">
                                <span class="event-location">
                                    <i class="fas fa-<?php echo strpos(strtolower($event_location), 'online') !== false ? 'globe' : 'map-marker-alt'; ?>"></i> 
                                    <?php echo esc_html($event_location); ?>
                                </span>
                                <span class="event-time"><i class="fas fa-clock"></i> <?php echo esc_html($time_display); ?></span>
                            </div>
                            <h3 class="event-title"><?php the_title(); ?></h3>
                            <p class="event-description"><?php echo esc_html(get_the_excerpt() ?: wp_trim_words(get_the_content(), 25)); ?></p>
                            
                            <?php if (!empty($event_type)) : ?>
                            <div class="event-tags">
                                <span class="tag"><?php echo esc_html(ucwords(str_replace('-', ' ', $event_type))); ?></span>
                            </div>
                            <?php endif; ?>
                            
                            <div class="event-footer">
                                <span class="event-price"><?php echo esc_html($event_price); ?></span>
                                <div class="event-actions">
                                    <?php if ($event_status === 'upcoming') : ?>
                                        <?php if ($event_registration_url) : ?>
                                            <a onclick="event.stopPropagation();" href="<?php echo esc_url($event_registration_url); ?>" class="btn-outline" target="_blank">Register</a>
                                        <?php else : ?>
                                            <button onclick="event.stopPropagation();" class="btn-outline">Register</button>
                                        <?php endif; ?>
                                        <button onclick="event.stopPropagation();" class="btn-calendar" <?php echo implode(' ', array_map(function($k, $v) { return $k . '="' . $v . '"'; }, array_keys($calendar_data), $calendar_data)); ?>>
                                            <i class="fas fa-calendar-plus"></i> Add to Calendar
                                        </button>
                                    <?php else : ?>
                                        <a href="#" class="btn-secondary">
                                            <?php echo $event_type === 'summit' ? 'View Photos' : 'View Report'; ?>
                                        </a>
                                    <?php endif; ?>
                                </div>
                            </div>
                        </div>
                    </div>
                    </a>
                    
                <?php endwhile;
                wp_reset_postdata();
            else : ?>
                <div class="no-events">
                    <p>No events found. <a href="<?php echo admin_url('post-new.php?post_type=mpa_event'); ?>">Add your first event</a>.</p>
                </div>
            <?php endif; ?>
        </div>
    </div>
</section>

<script>
    // Populate upcoming events from All Events section
    document.addEventListener('DOMContentLoaded', function() {
        // Store all event cards once for filtering
        let allStoredEventCards = [];
        
        const upcomingEventsGrid = document.getElementById('upcomingEventsGrid');
        if (upcomingEventsGrid) {
            // Wait a bit for events to be rendered, then populate upcoming events
            setTimeout(populateUpcomingEvents, 500);
        }
        
        // Initialize calendar functionality
        initCalendarButtons();
        initCalendarSubscription();
        initViewAllEventsLink();
        initFilterTabs();

        // Store cards at 100ms (before populateUpcomingEvents runs)
        setTimeout(function() {
            allStoredEventCards = Array.from(document.querySelectorAll(".events-grid .event-card-link"));
            
        }, 100);

        // Apply initial filter much later (at 700ms)
        setTimeout(function() {
            filterEvents('upcoming');
        }, 700);
        


        function populateUpcomingEvents() {
            // Get all event cards from the All Events section
            const allEventCards = document.querySelectorAll(".events-grid .event-card-link");
            const today = new Date();
            today.setHours(0, 0, 0, 0); // Reset to start of day
            const upcomingEvents = [];
            
            // Filter and sort upcoming events
            allEventCards.forEach(eventLink => {
                const eventCard = eventLink.querySelector(".event-card");
                if (!eventCard) return;
                
                // Use data-event-date attribute instead of parsing badge
                const eventDateStr = eventCard.getAttribute("data-event-date");
                const eventStatus = eventCard.getAttribute("data-event-status");
                
                if (eventDateStr && eventStatus === "upcoming") {
                    const eventDate = new Date(eventDateStr);
                    
                    // Only include future events
                    if (eventDate >= today) {
                        upcomingEvents.push({
                            date: eventDate,
                            element: eventLink
                        });
                    }
                }
            });
            
            // Sort by date and take first 2
            upcomingEvents.sort((a, b) => a.date - b.date);
            const nextTwoEvents = upcomingEvents.slice(0, 2);
            
            // Clear existing content
            upcomingEventsGrid.innerHTML = '';
            
            // Add the next 2 upcoming events
            nextTwoEvents.forEach(eventObj => {
                // Clone the event card
                const clonedEvent = eventObj.element.cloneNode(true);
                
                // Add the "featured" class for styling
                const clonedCard = clonedEvent.querySelector(".event-card");
                clonedCard.classList.add('featured');
                
                // Add "UPCOMING" badge
                const eventImage = clonedCard.querySelector('.event-image');
                if (eventImage && !eventImage.querySelector('.event-badge')) {
                    const upcomingBadge = document.createElement('div');
                    upcomingBadge.className = 'event-badge upcoming';
                    upcomingBadge.textContent = 'UPCOMING';
                    eventImage.appendChild(upcomingBadge);
                }
                
                // Add to upcoming events grid
                upcomingEventsGrid.appendChild(clonedEvent);

            });
            
            // Re-initialize calendar buttons for cloned events
            initCalendarButtons();
        }
        
        function initCalendarButtons() {
            const calendarButtons = document.querySelectorAll('.btn-calendar');
            
            calendarButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const eventId = this.getAttribute('data-event');
                    const eventDate = this.getAttribute('data-date');
                    const eventTime = this.getAttribute('data-time');
                    const eventTitle = this.getAttribute('data-title');
                    const eventLocation = this.getAttribute('data-location');
                    
                    // Parse time range
                    const [startTime, endTime] = eventTime.split('-');
                    const [startHour, startMinute] = startTime.split(':').map(Number);
                    const [endHour, endMinute] = endTime.split(':').map(Number);
                    
                    // Create event start and end dates
                    const eventStart = new Date(eventDate + 'T' + startTime + ':00');
                    const eventEnd = new Date(eventDate + 'T' + endTime + ':00');
                    
                    // Generate calendar data
                    const calendarData = generateCalendarData(eventTitle, eventStart, eventEnd, eventLocation);
                    
                    // Create and download .ics file
                    downloadCalendarFile(calendarData, eventTitle);
                });
            });
        }
        
        function generateCalendarData(title, start, end, location) {
            const formatDate = (date) => {
                return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
            };
            
            const description = `Join us for ${title} at ${location}. Organized by Malaysia PropTech Association.`;
            
            return [
                'BEGIN:VCALENDAR',
                'VERSION:2.0',
                'PRODID:-//Malaysia PropTech Association//Event Calendar//EN',
                'CALSCALE:GREGORIAN',
                'METHOD:PUBLISH',
                'BEGIN:VEVENT',
                `UID:${Date.now()}@proptech.org.my`,
                `DTSTAMP:${formatDate(new Date())}`,
                `DTSTART:${formatDate(start)}`,
                `DTEND:${formatDate(end)}`,
                `SUMMARY:${title}`,
                `DESCRIPTION:${description}`,
                `LOCATION:${location}`,
                'ORGANIZER;CN=Malaysia PropTech Association:mailto:info@proptech.org.my',
                'STATUS:CONFIRMED',
                'SEQUENCE:0',
                'END:VEVENT',
                'END:VCALENDAR'
            ].join('\r\n');
        }
        
        function downloadCalendarFile(calendarData, eventTitle) {
            const blob = new Blob([calendarData], { type: 'text/calendar;charset=utf-8' });
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `${eventTitle.replace(/[^a-zA-Z0-9]/g, '_')}.ics`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
            
            // Show success message
            showNotification('Event added to calendar!', 'success');
        }
        
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? 'var(--accent-green)' : 'var(--accent-blue)'};
                color: white;
                padding: var(--spacing-md);
                border-radius: var(--border-radius-md);
                box-shadow: var(--shadow-md);
                z-index: 1000;
                font-weight: 500;
                animation: slideIn 0.3s ease;
            `;
            
            document.body.appendChild(notification);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }
        
        function initCalendarSubscription() {
            const subscribeBtn = document.getElementById('subscribeCalendarBtn');
            if (subscribeBtn) {
                subscribeBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Get real events from the page
                    const allEvents = [];
                    
                    // Extract real event data from the page
                    document.querySelectorAll('.event-card').forEach(eventCard => {
                        const title = eventCard.querySelector('.event-title')?.textContent || '';
                        const dateElement = eventCard.querySelector('.event-date-badge');
                        const day = dateElement?.querySelector('.day')?.textContent || '';
                        const month = dateElement?.querySelector('.month')?.textContent || '';
                        const timeElement = eventCard.querySelector('.event-time')?.textContent || '';
                        const locationElement = eventCard.querySelector('.event-location')?.textContent || '';
                        const descriptionElement = eventCard.querySelector('.event-description')?.textContent || '';
                        
                        if (title && day && month) {
                            // Convert month abbreviation to number
                            const monthMap = {
                                'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',
                                'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',
                                'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'
                            };
                            const monthNum = monthMap[month] || '01';
                            const currentYear = new Date().getFullYear();
                            const eventYear = currentYear + (monthNum < '06' ? 1 : 0); // Assume events in Jan-May are next year
                            
                            allEvents.push({
                                title: title.trim(),
                                date: `${eventYear}-${monthNum}-${day.padStart(2, '0')}`,
                                time: timeElement.replace(/.*(\d{1,2}:\d{2}\s*[AP]M\s*-\s*\d{1,2}:\d{2}\s*[AP]M).*/, '$1'),
                                location: locationElement.replace(/.*\s/, '').trim(),
                                description: descriptionElement.trim()
                            });
                        }
                    });
                    
                    // Generate comprehensive calendar data
                    const calendarData = generateSubscriptionCalendarData(allEvents);
                    
                    // Create and download .ics file
                    downloadCalendarFile(calendarData, 'MPA_Events_Calendar');
                    
                    // Show success message
                    showNotification('MPA Events Calendar downloaded! Import this file to subscribe to all our events.', 'success');
                });
            }
        }
        
        function generateSubscriptionCalendarData(events) {
            const formatDate = (date) => {
                return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
            };
            
            let calendarContent = [
                'BEGIN:VCALENDAR',
                'VERSION:2.0',
                'PRODID:-//Malaysia PropTech Association//Event Calendar//EN',
                'CALSCALE:GREGORIAN',
                'METHOD:PUBLISH',
                'X-WR-CALNAME:MPA Events Calendar',
                'X-WR-CALDESC:Malaysia PropTech Association Events and Activities',
                'X-WR-TIMEZONE:Asia/Kuala_Lumpur'
            ];
            
            events.forEach((event, index) => {
                const [startTime, endTime] = event.time.split('-');
                const eventStart = new Date(event.date + 'T' + startTime + ':00');
                const eventEnd = new Date(event.date + 'T' + endTime + ':00');
                
                calendarContent = calendarContent.concat([
                    'BEGIN:VEVENT',
                    `UID:mpa-event-${index + 1}@proptech.org.my`,
                    `DTSTAMP:${formatDate(new Date())}`,
                    `DTSTART:${formatDate(eventStart)}`,
                    `DTEND:${formatDate(eventEnd)}`,
                    `SUMMARY:${event.title}`,
                    `DESCRIPTION:${event.description} - Organized by Malaysia PropTech Association`,
                    `LOCATION:${event.location}`,
                    'ORGANIZER;CN=Malaysia PropTech Association:mailto:info@proptech.org.my',
                    'STATUS:CONFIRMED',
                    'SEQUENCE:0',
                    'END:VEVENT'
                ]);
            });
            
            calendarContent.push('END:VCALENDAR');
            return calendarContent.join('\r\n');
        }
        
        function initViewAllEventsLink() {
            const viewAllLink = document.getElementById('viewAllEventsLink');
            if (viewAllLink) {
                viewAllLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const allEventsSection = document.getElementById('all-events');
                    if (allEventsSection) {
                        allEventsSection.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            }
        }

        // Initialize filter tabs functionality
        function initFilterTabs() {
            const filterTabs = document.querySelectorAll('.filter-tab');
            
            filterTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    // Remove active class from all tabs
                    filterTabs.forEach(t => t.classList.remove('active'));
                    // Add active class to clicked tab
                    this.classList.add('active');
                    
                    const filter = this.getAttribute('data-filter');
                    // Query fresh DOM each time
                    filterEvents(filter);
                });
            });
        }

        function filterEvents(filter) {
            const grid = document.querySelector(".events-grid");
            if (!grid) return;

            // Use stored cards for filtering (with fallback)
            let allCards = allStoredEventCards.length > 0 
                ? allStoredEventCards 
                : Array.from(grid.querySelectorAll(".event-card-link"));

            // Prepare array for sorting visible cards
            const sortableCards = [];
            
            allCards.forEach(cardLink => {
                const eventCard = cardLink.querySelector(".event-card");
                if (!eventCard) return;
                
                const eventStatus = eventCard.getAttribute("data-event-status");
                const eventType = eventCard.getAttribute("data-event-type");
                const eventDate = eventCard.getAttribute("data-event-date");
                
                let shouldShow = false;
                
                // Determine visibility based on filter
                if (filter === "upcoming") {
                    shouldShow = (eventStatus === "upcoming" || eventStatus === "featured");
                } else if (filter === "webinar") {
                    shouldShow = (eventType === "webinar");
                } else if (filter === "summit") {
                    shouldShow = (eventType === "summit");
                } else if (filter === "past") {
                    shouldShow = (eventStatus === "past");
                } else if (filter === "all") {
                    shouldShow = true;
                } else {
                    shouldShow = true;
                }
                
                if (shouldShow) {
                    sortableCards.push({
                        element: cardLink,
                        date: new Date(eventDate),
                        status: eventStatus
                    });
                }
            });
            
            // Sort cards
            if (filter === "past" || filter === "all") {
                // Most recent first (descending)
                sortableCards.sort((a, b) => b.date - a.date);
            } else {
                // Oldest first (ascending)
                sortableCards.sort((a, b) => a.date - b.date);
            }
            
            // Clear grid and add back only visible cards in sorted order

            grid.innerHTML = "";
            sortableCards.forEach(item => {
                grid.appendChild(item.element);
            });
        }
    });
</script>

<?php get_footer(); ?>
